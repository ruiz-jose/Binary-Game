---
import Layout from '../../layouts/Layout.astro';
import { getImage } from 'astro:assets';
import snow from 'src/assets/winter.png';
import { Content } from 'src/mdx/winter/one.mdx';

const optimizedBackground = await getImage({ src: snow });
const vtbotBackgroundImage = `url(${optimizedBackground.src})`;
---

<Layout title="winter" background={`${vtbotBackgroundImage}`}>
	<a id="bell" href="/winter/two/" href="/winter/two/">üîî</a>
	<a id="snowboarder" href="/winter/two/">üèÇ</a>
	<a id="gift" href="/winter/two/">üéÅ</a>
	<a id="rocket" href="/winter/two/">üöÄ</a>
	<a id="tree" href="/winter/two/">üéÑ</a>
	<a id="snowflake1" href="/winter/two/">‚ùÑ</a>
	<a id="snowflake2" href="/winter/two/">‚ùÑ</a>
	<a id="snowflake3" href="/winter/two/">‚ùÑ</a>
	<a id="penguin" href="/winter/two/">üêß</a>
	<main><Content /></main>
	<audio controls src="/winter.mp3" transition:persist="audio"></audio>
</Layout>
<style is:global>
	::view-transition-group(*) {
		animation-duration: 2s;
	}

	[data-astro-transition-fallback='old'] {
		animation: astroFadeOut 2.5s cubic-bezier(0.76, 0, 0.24, 1) both;
	}
	[data-astro-transition-fallback='new'] {
		animation: astroFadeIn 1s cubic-bezier(0.76, 0, 0.24, 1) both;
	}

	audio {
		position: absolute;
		top: 0;
		right: 0;
	}
	main {
		max-width: 33vw;
		margin: auto;
		padding: 0.5ex 2ex;
		background-color: #fff;
		position: absolute;
		font-size: min(3vw, 3vh);
	}
	html body {
		background-size: auto 100vh !important;
		overflow: hidden;
	}
	a {
		text-decoration: none;
	}
	#bell {
		view-transition-name: bell;
		position: absolute;
		font-size: min(15vw, 15vh);
		bottom: 10vh;
		left: 10vw;
		transform-origin: 50% 30%;
		animation: turn10 0.7s infinite ease-in-out;
	}
	#snowboarder {
		position: absolute;
		font-size: min(14vw, 15vh);
		bottom: 25vh;
		right: 10vw;
		transform: rotateZ(10deg);
		animation: turn3 0.5s infinite ease-in-out;
	}
	#snowboarder.fade {
		animation: drop 0.5s ease-in-out both;
	}

	#penguin {
		view-transition-name: penguin;
		position: absolute;
		font-size: min(25vw, 15vh);
		bottom: -5vh;
		right: 5vw;
		transform: scale(1);
		animation: updown 2s infinite ease-in-out;
	}

	#gift {
		view-transition-name: gift;
		position: absolute;
		font-size: min(10vw, 10vh);
		bottom: 35vh;
		right: 50vw;
		transform: scale(1);
	}
	#rocket {
		view-transition-name: rocket;
		position: absolute;
		font-size: min(30vw, 30vh);
		bottom: 35vh;
		right: 50vw;
		transform-origin: 50% 50%;
		transform: scale(0.7) translateX(2vw) translateY(1vw) rotateZ(-45deg);
	}
	#tree {
		position: absolute;
		font-size: min(30vw, 30vh);
		bottom: 35vh;
		right: 50vw;
		animation: turn3 5s infinite ease-in-out;
		transform-origin: 50% 100%;
	}
	#tree.fade {
		animation: cut 0.5s ease-in-out both;
	}
	#snowflake2 {
		view-transition-name: snowflake2;
		color: lightblue;
		position: absolute;
		font-size: min(20vw, 20vh);
		top: 15vh;
		left: 10vw;
		transform: scale(1);
		animation: turn10 4s infinite ease-in-out;
	}
	#snowflake3 {
		view-transition-name: snowflake3;
		color: white;
		position: absolute;
		font-size: min(20vw, 20vh);
		top: 5vh;
		right: 50vw;
		transform: scale(0.5);
		animation: turn10 5s infinite ease-in-out;
	}
	#snowflake1 {
		view-transition-name: snowflake1;
		color: skyblue;
		position: absolute;
		font-size: min(20vw, 20vh);
		top: 15vh;
		right: 10vw;
		transform: scale(0.7);
		animation: turn10 3s infinite ease-in-out;
	}
	@keyframes updown {
		0%,
		100% {
			transform: translateY(35vh);
		}
		90% {
			transform: translateY(0vh);
		}
	}
	@keyframes turn3 {
		0%,
		100% {
			transform: rotateZ(-3deg);
		}
		50% {
			transform: rotateZ(3deg);
		}
	}
	@keyframes turn10 {
		0%,
		100% {
			transform: rotateZ(-10deg);
		}
		50% {
			transform: rotateZ(10deg);
		}
	}
	@keyframes cut {
		to {
			transform: rotateZ(90deg);
		}
	}
	@keyframes drop {
		to {
			transform: rotateX(90deg) translateX(-10vw) translateY(4vh);
		}
	}
</style>
<script>
	import {
		TRANSITION_BEFORE_PREPARATION,
		isTransitionBeforePreparationEvent,
	} from 'astro:transitions/client';

	document.addEventListener(TRANSITION_BEFORE_PREPARATION, (event) => {
		if (isTransitionBeforePreparationEvent(event) && event.from.pathname.endsWith('/winter/one/')) {
			const originalLoader = event.loader;
			event.loader = async () => {
				document.querySelector('main')?.remove();
				await Promise.all([
					originalLoader(),
					fade(document.getElementById('tree')),
					fade(document.getElementById('snowboarder')),
				]);
			};
		}
	});
	const fade = (element: HTMLElement | null) =>
		new Promise((resolve) =>
			element
				? (element.classList.add('fade'), element.addEventListener('animationend', resolve))
				: resolve(0)
		);
</script>
