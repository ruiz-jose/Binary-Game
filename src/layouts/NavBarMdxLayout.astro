---
import MdxLayout from './MdxLayout.astro';
const { frontmatter } = Astro.props;
---

<MdxLayout title={frontmatter.title}>
	<div transition:animate="initial">
		<slot />
		<div style="height:10em">&nbsp;</div>
	</div>
	<aside transition:persist="aside">
		<p>Docs</p>
		<ul>
			<li>
				<a href="/docs/Jotter/">The Jotter</a>
			</li>
			<li>
				<a href="/docs/Events/">View Transition Events</a>
			</li>
			<li>
				<a href="/docs/Practical/">Practitioner's Guide</a>
			</li>
			<li>
				<a href="/demos/" data-astro-reload>Back to Demos</a>
			</li>
		</ul>
	</aside>
</MdxLayout>
<script>
	document.addEventListener('astro:after-swap', activate);
	function activate() {
		document.querySelectorAll('aside li a').forEach((a) => {
			if (a instanceof HTMLAnchorElement) {
				a.parentElement?.classList[location.href.endsWith(a.href) ? 'add' : 'remove']('active');
			}
		});
	}
	activate();
</script>
<style is:global>
	aside {
		z-index: 100;
		font-family: sans-serif;
		position: fixed;
		right: 0;
		bottom: 0;
		max-width: 50vw;
		background-color: var(--vtbot-table-background-color);
		padding: 1rem;
		overflow-y: auto;
		border-radius: 20px 0 0 0;
		border: 1px dashed #ddd;
		box-shadow: -1px -1px #5659;
	}
	aside p {
		font-weight: bold;
		margin: 0 0 0.25em 0;
	}
	aside ul {
		margin: 0 0;
		padding: 1em;
	}
	aside li {
		list-style: none;
		padding: 0.2em 1em;
	}
	aside li::before {
		content: '↪︎ ';
	}
	aside li a {
		text-decoration: none;
	}
	aside li.active,
	aside li.active a {
		background-color: var(--vtbot-accent);
		color: var(--vtbot-table-background-color);
	}
</style>
